name: Build-Push-Deploy (PowerShell + PAT)

on:
  workflow_dispatch

jobs:
  deploy:
    runs-on: self-hosted

    defaults:
      run:
        shell: powershell -NoProfile -ExecutionPolicy Bypass -Command "& {0}"

    env:
      MINIKUBE_HOME: 'C:\Users\Bar-DesktopNG\.minikube'
      KUBECONFIG:    'C:\Users\Bar-DesktopNG\.kube\config'
      TAG: ${{ github.run_number }}             # dynamic tag 1,2,3 ...

    steps:
      # --------------------------------------------------------------------
      # 0) Cluster sanity checks
      # --------------------------------------------------------------------
      - name: Check Minikube status
        run: minikube status

      - name: kubectl connectivity
        run: kubectl get nodes

      # --------------------------------------------------------------------
      # 1) Checkout code (needs to be before build & helm) and code scan
      # --------------------------------------------------------------------
      - name: Checkout repo (firsthelm branch)
        uses: actions/checkout@v4
        with:
          ref: firsthelm                # ensure correct branch
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
      - name: Trivy scan Filesystem (dependencies)
        uses: aquasecurity/trivy-action@v0.17.0
        with:
          scan-type: fs
          scan-ref: .
          severity: HIGH,CRITICAL
      - name: Trivy scan Helm chart config
        uses: aquasecurity/trivy-action@v0.17.0
        with:
          scan-type: 'config'
          scan-ref: './sampleapp'
          severity: 'HIGH,CRITICAL'
      - name: Trivy scan Secrets
        uses: aquasecurity/trivy-action@v0.17.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          scanners: 'secret'
      # --------------------------------------------------------------------
      # 2) Login to GHCR with PAT
      # --------------------------------------------------------------------
      - name: Login to GHCR
        run: |
          docker login ghcr.io `
            -u ${{ github.repository_owner }} `
            -p ${{ secrets.GHCR_PAT }}

      # --------------------------------------------------------------------
      # 3) Build & push image (lower-case owner)
      # --------------------------------------------------------------------
      - name: Build & push image
        run: |
          $owner = "${{ github.repository_owner }}".ToLower()
          $tag   = $Env:TAG
          docker build -t ghcr.io/$owner/sample-nodejs:$tag .
          docker push ghcr.io/$owner/sample-nodejs:$tag
      - name: Trivy scan Docker image
        uses: aquasecurity/trivy-action@v0.17.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/sample-nodejs:${{ env.TAG }}
          severity: 'HIGH,CRITICAL'
      # --------------------------------------------------------------------
      # 4) Install Helm (only if not already in PATH)
      # --------------------------------------------------------------------
      - name: Install Helm
        run: |
          $version   = 'v3.14.0'
          $zipUrl    = "https://get.helm.sh/helm-$version-windows-amd64.zip"
          $zipPath   = "$env:TEMP\helm.zip"
          $installDir= "$env:ProgramFiles\helm"      # C:\Program Files\helm
          Invoke-WebRequest $zipUrl -OutFile $zipPath
          Expand-Archive $zipPath -DestinationPath $env:TEMP -Force
          New-Item -ItemType Directory -Force -Path $installDir | Out-Null
          Copy-Item "$env:TEMP\windows-amd64\helm.exe" $installDir -Force
          # make helm.exe visible to later steps
          echo "$installDir" | Out-File -FilePath $env:GITHUB_PATH -Append

      # (Optional) Inspect workspace to be 100 % sure the chart is present
      - name: List workspace (debug)
        run: |
          Write-Host "`nWorkspace contents (top-level):"
          Get-ChildItem -Name
          Write-Host "`nChart folder contents:"
          Get-ChildItem -Recurse ./sampleapp/chart | Select-Object -First 20

      # --------------------------------------------------------------------
      # 5) Deploy with Helm
      # --------------------------------------------------------------------
      - name: Deploy with Helm
        run: |
          $owner = "${{ github.repository_owner }}".ToLower()
          $tag   = $Env:TAG
          helm upgrade --install sample-nodejs ./sampleapp `
            --set image.repository=ghcr.io/$owner/sample-nodejs `
            --set image.tag=$tag `
            --set image.pullPolicy=IfNotPresent
